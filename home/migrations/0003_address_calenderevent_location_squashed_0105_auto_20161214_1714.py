# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-12-14 17:36
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import home.blocks
import home.models
import home.validators
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailcore.models
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks
import wagtail.wagtailimages.models
import wagtail.wagtailsearch.index


class Migration(migrations.Migration):

    replaces = [('home', '0003_address_calenderevent_location'), ('home', '0004_auto_20161027_0838'), ('home', '0005_auto_20161028_1523'), ('home', '0006_auto_20161028_1912'), ('home', '0007_auto_20161029_0813'), ('home', '0008_auto_20161029_0853'), ('home', '0009_auto_20161029_1100'), ('home', '0010_calendarpage'), ('home', '0011_auto_20161101_1014'), ('home', '0012_auto_20161101_1024'), ('home', '0013_auto_20161101_1338'), ('home', '0014_remove_blog_name'), ('home', '0015_blogindex_intro'), ('home', '0016_aboutpage'), ('home', '0017_influencer_influencerindex'), ('home', '0018_blog_image'), ('home', '0019_auto_20161103_1548'), ('home', '0020_auto_20161108_1352'), ('home', '0021_auto_20161108_1408'), ('home', '0022_eventindex_name'), ('home', '0023_auto_20161109_1452'), ('home', '0024_auto_20161109_1559'), ('home', '0025_auto_20161109_1601'), ('home', '0026_auto_20161109_1707'), ('home', '0027_partners'), ('home', '0028_auto_20161110_0940'), ('home', '0029_partner_logo'), ('home', '0030_auto_20161115_1901'), ('home', '0031_auto_20161115_1926'), ('home', '0032_auto_20161115_1950'), ('home', '0033_auto_20161115_1951'), ('home', '0034_auto_20161116_1450'), ('home', '0035_influencerrelatedlink'), ('home', '0036_auto_20161118_1301'), ('home', '0037_influencer_influencerrelatedlink'), ('home', '0038_remove_influencer_catchphrase'), ('home', '0039_influencer_catchphrase'), ('home', '0040_auto_20161118_1412'), ('home', '0041_auto_20161118_1419'), ('home', '0042_auto_20161118_1432'), ('home', '0043_auto_20161118_1434'), ('home', '0044_influencerrelatedlink_icon_class'), ('home', '0045_remove_eventindex_name'), ('home', '0046_auto_20161122_1953'), ('home', '0047_auto_20161122_1954'), ('home', '0048_auto_20161123_1045'), ('home', '0049_auto_20161123_1358'), ('home', '0050_eventcategory'), ('home', '0051_auto_20161123_1406'), ('home', '0052_auto_20161123_1418'), ('home', '0053_auto_20161123_1430'), ('home', '0054_auto_20161123_1430'), ('home', '0055_whatwedo_related_page'), ('home', '0056_homepagecontent'), ('home', '0057_auto_20161123_1858'), ('home', '0058_auto_20161123_1859'), ('home', '0059_auto_20161124_0853'), ('home', '0060_auto_20161124_0900'), ('home', '0061_auto_20161124_0918'), ('home', '0062_auto_20161124_0941'), ('home', '0063_auto_20161124_1016'), ('home', '0064_auto_20161124_1541'), ('home', '0065_auto_20161124_1558'), ('home', '0066_auto_20161124_1604'), ('home', '0067_influencer_quote'), ('home', '0068_auto_20161125_1829'), ('home', '0069_auto_20161125_1832'), ('home', '0070_auto_20161125_1832'), ('home', '0071_auto_20161125_1838'), ('home', '0072_auto_20161125_1841'), ('home', '0073_auto_20161129_0852'), ('home', '0074_homepage_intro_image'), ('home', '0075_auto_20161130_0902'), ('home', '0076_event_location'), ('home', '0077_auto_20161130_1056'), ('home', '0078_auto_20161130_1057'), ('home', '0079_auto_20161130_1104'), ('home', '0080_address_location'), ('home', '0081_eventlocation'), ('home', '0082_contactlocation'), ('home', '0083_contactpage_email'), ('home', '0084_auto_20161203_1039'), ('home', '0085_contactpage_intro_text'), ('home', '0086_auto_20161203_1130'), ('home', '0087_auto_20161203_1136'), ('home', '0088_auto_20161203_1145'), ('home', '0089_auto_20161208_2022'), ('home', '0090_eventgroup'), ('home', '0091_eventinstance'), ('home', '0092_eventeventinstance'), ('home', '0093_auto_20161209_0744'), ('home', '0094_auto_20161209_0756'), ('home', '0095_event_subtitle'), ('home', '0096_auto_20161209_1850'), ('home', '0097_auto_20161211_1602'), ('home', '0098_auto_20161211_1829'), ('home', '0099_eventinstance_image'), ('home', '0100_auto_20161213_1542'), ('home', '0101_homepage_catchphrase_color'), ('home', '0102_auto_20161213_1811'), ('home', '0103_auto_20161213_1832'), ('home', '0104_auto_20161213_1926'), ('home', '0105_auto_20161214_1714')]

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('home', '0002_create_homepage'),
        ('wagtailredirects', '0005_capitalizeverbose'),
        ('wagtailimages', '0015_fill_filter_spec_field'),
        ('wagtailforms', '0003_capitalizeverbose'),
        ('wagtailcore', '0030_index_on_pagerevision_created_at'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=40, verbose_name='stad')),
                ('postal_code', models.CharField(max_length=8, null=True, verbose_name='postcode')),
                ('street', models.CharField(max_length=40, null=True, verbose_name='straat')),
                ('number', models.CharField(max_length=8, null=True, verbose_name='nummer')),
                ('country', django_countries.fields.CountryField(default='BE', max_length=2, null=True, verbose_name='land')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='home.Address', verbose_name='adres')),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('blog_content', wagtail.wagtailcore.fields.StreamField((('blog_title', wagtail.wagtailcore.blocks.StructBlock((), help_text='Dit is de titel van het artikel, voorzien van een afbeelding')), ('blog_intro', home.blocks.IntroTextBlock(help_text='Hiermee kan je optioneel een korte inleiding voorzien')), ('blog_subtitle', home.blocks.SubtitleBlock()), ('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock(()))), verbose_name='Blog inhoud')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ContactPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('catchphrase', models.CharField(default='Entertainment voor jongeren', max_length=164, verbose_name='catchphrase')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterModelOptions(
            name='blog',
            options={'ordering': ['sort_order']},
        ),
        migrations.AddField(
            model_name='blog',
            name='date',
            field=models.DateField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='blog',
            name='sort_order',
            field=models.IntegerField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_title', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(label='afbeelding', required=True)), ('title', wagtail.wagtailcore.blocks.CharBlock(label='titel', required=True))), help_text='Dit is de titel van het artikel, voorzien van een afbeelding')), ('blog_intro', home.blocks.IntroTextBlock(help_text='Hiermee kan je optioneel een korte inleiding voorzien')), ('blog_subtitle', home.blocks.SubtitleBlock()), ('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock(()))), verbose_name='Blog inhoud'),
        ),
        migrations.CreateModel(
            name='BlogIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.wagtailcore.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.DeleteModel(
            name='Address',
        ),
        migrations.AlterModelOptions(
            name='location',
            options={'ordering': ['name'], 'verbose_name': 'locatie', 'verbose_name_plural': 'locaties'},
        ),
        migrations.AddField(
            model_name='blog',
            name='intro_text',
            field=models.TextField(blank=True, default='', null=True, verbose_name='intro text'),
        ),
        migrations.CreateModel(
            name='CustomImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.wagtailimages.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('collection', models.ForeignKey(default=wagtail.wagtailcore.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.wagtailsearch.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='CustomRendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(blank=True, db_index=True, default='', max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.wagtailimages.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=255)),
                ('filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Filter')),
                ('image', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='home.CustomImage')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='customrendition',
            unique_together=set([('image', 'filter', 'focal_point_key')]),
        ),
        migrations.AlterField(
            model_name='customimage',
            name='file',
            field=models.ImageField(height_field='height', upload_to=home.models.get_upload_to, verbose_name='file', width_field='width'),
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('name', models.CharField(max_length=164, verbose_name='naam')),
                ('description', models.TextField(verbose_name='beschrijving')),
                ('event_date', models.DateField(default=datetime.date.today, verbose_name='datum')),
                ('event_duration', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(21)], verbose_name='Duur (# dagen)')),
                ('website', models.URLField(verbose_name='event website')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calendar_events', to='home.EventCategory')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CalendarIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterField(
            model_name='customimage',
            name='file',
            field=models.ImageField(height_field='height', upload_to=home.models.get_upload_to, validators=[home.validators.validate_image_min], verbose_name='file', width_field='width'),
        ),
        migrations.CreateModel(
            name='CalendarPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.AlterModelOptions(
            name='eventcategory',
            options={'ordering': ['name'], 'verbose_name': 'Evenement Categorie', 'verbose_name_plural': 'Evenement Categorieën'},
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_title', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(label='afbeelding', required=True)), ('title', wagtail.wagtailcore.blocks.CharBlock(label='titel', required=True))), help_text='Dit is de titel van het artikel, voorzien van een afbeelding')), ('blog_intro', home.blocks.IntroTextBlock(help_text='Hiermee kan je optioneel een korte inleiding voorzien')), ('blog_subtitle', home.blocks.SubtitleBlock()), ('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock(()))), verbose_name='Blog Inhoud'),
        ),
        migrations.CreateModel(
            name='AboutPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InfluencerIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='blog',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_images', to='home.CustomImage', verbose_name='afbeelding'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='home.EventCategory')),
                ('description', models.TextField(null=True, verbose_name='beschrijving')),
                ('event_date', models.DateField(default=datetime.date.today, verbose_name='datum')),
                ('event_duration', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(21)], verbose_name='Duur (# dagen)')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage')),
                ('name', models.CharField(default='', max_length=164, verbose_name='naam')),
                ('website', models.URLField(null=True, verbose_name='event website')),
                ('catchphrase', models.CharField(default='Entertainment voor jongeren', max_length=164, verbose_name='catchphrase')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EventIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='blog',
            name='edited',
            field=models.DateField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_title', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock(label='afbeelding', required=True)), ('title', wagtail.wagtailcore.blocks.CharBlock(label='titel', required=True))), help_text='Dit is de titel van het artikel, voorzien van een afbeelding')), ('blog_intro', home.blocks.IntroTextBlock(help_text='Hiermee kan je optioneel een korte inleiding voorzien')), ('blog_subtitle', home.blocks.SubtitleBlock()), ('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),)))), verbose_name='Blog Inhoud'),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_intro', home.blocks.IntroTextBlock(help_text='Hiermee kan je optioneel een korte inleiding voorzien')), ('blog_subtitle', home.blocks.SubtitleBlock()), ('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),)))), verbose_name='Blog Inhoud'),
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='naam')),
                ('website', models.URLField(verbose_name='website')),
                ('description', models.TextField(verbose_name='beschrijving')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage')),
            ],
        ),
        migrations.CreateModel(
            name='YourinPartner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='partners', to='home.HomePage')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Partner')),
            ],
        ),
        migrations.AlterModelOptions(
            name='partner',
            options={'ordering': ['name'], 'verbose_name': 'partner', 'verbose_name_plural': 'partners'},
        ),
        migrations.AddField(
            model_name='homepage',
            name='catchphrase',
            field=models.CharField(default='Entertainment voor jongeren', max_length=164, verbose_name='catchphrase'),
        ),
        migrations.CreateModel(
            name='Numbers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=28, verbose_name='naam')),
                ('value', models.PositiveIntegerField(default=1, verbose_name='aantal')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='yourinpartner',
            unique_together=set([]),
        ),
        migrations.CreateModel(
            name='WhatWeDo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='naam')),
                ('extra_info', models.TextField(max_length=512, verbose_name='info tekst')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name='afbeelding')),
            ],
            options={
                'verbose_name': 'pijler',
                'verbose_name_plural': 'pijlers',
            },
        ),
        migrations.AlterModelOptions(
            name='homepage',
            options={'verbose_name': 'startpagina'},
        ),
        migrations.CreateModel(
            name='Influencer',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('catchphrase', models.CharField(default='Entertainment voor jongeren', max_length=164, verbose_name='catchphrase')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='InfluencerRelatedLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_external', models.URLField(blank=True, verbose_name='Externe link')),
                ('title', models.IntegerField(choices=[(1, 'Facebook'), (2, 'Twitter'), (3, 'Youtube')], verbose_name='Link naar')),
                ('link_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_links', to='home.Influencer')),
                ('icon_class', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
        ),
        migrations.RemoveField(
            model_name='influencer',
            name='catchphrase',
        ),
        migrations.AddField(
            model_name='influencer',
            name='extra_info',
            field=models.TextField(null=True, verbose_name='Beschrijving'),
        ),
        migrations.AddField(
            model_name='influencer',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name='afbeelding'),
        ),
        migrations.AlterField(
            model_name='influencer',
            name='name',
            field=models.CharField(max_length=128, null=True),
        ),
        migrations.AlterField(
            model_name='influencer',
            name='name',
            field=models.CharField(blank=True, max_length=128, null=True),
        ),
        migrations.AlterModelOptions(
            name='event',
            options={'ordering': ['-event_date'], 'verbose_name': 'evenementen'},
        ),
        migrations.AlterField(
            model_name='event',
            name='name',
            field=models.CharField(default='', max_length=164, null=True, verbose_name='naam'),
        ),
        migrations.AlterField(
            model_name='event',
            name='name',
            field=models.CharField(blank=True, default='', max_length=164, null=True, verbose_name='naam'),
        ),
        migrations.AddField(
            model_name='blog',
            name='class_name',
            field=models.CharField(default='cal_blog', max_length=28),
        ),
        migrations.AddField(
            model_name='event',
            name='class_name',
            field=models.CharField(default='cal_event', max_length=28),
        ),
        migrations.RenameModel(
            old_name='EventCategory',
            new_name='Category',
        ),
        migrations.AlterModelOptions(
            name='whatwedo',
            options={'verbose_name': 'homepage pijler', 'verbose_name_plural': 'homepage pijlers'},
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),)))), verbose_name='Blog Inhoud'),
        ),
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('category_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Category')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='home.Event')),
            ],
            bases=('home.category',),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(max_length=64, verbose_name='categorie'),
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='home.Event')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_eventtag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='home.EventTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='blog',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='home.BlogTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='BlogTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='home.Blog')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_blogtag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='whatwedo',
            name='image',
        ),
        migrations.DeleteModel(
            name='WhatWeDo',
        ),
        migrations.CreateModel(
            name='WhatWeDo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='naam')),
                ('extra_info', models.TextField(max_length=512, verbose_name='info tekst')),
            ],
            options={
                'verbose_name': 'homepage pijler',
                'verbose_name_plural': 'homepage pijlers',
            },
        ),
        migrations.CreateModel(
            name='HomePageContent',
            fields=[
                ('whatwedo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.WhatWeDo')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='home.HomePage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.whatwedo', models.Model),
        ),
        migrations.AddField(
            model_name='whatwedo',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name='afbeelding'),
        ),
        migrations.AddField(
            model_name='whatwedo',
            name='related_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page', verbose_name='Link naar pagina'),
        ),
        migrations.AlterField(
            model_name='whatwedo',
            name='extra_info',
            field=models.TextField(blank=True, max_length=512, null=True, verbose_name='info tekst'),
        ),
        migrations.CreateModel(
            name='HomePageNumbers',
            fields=[
                ('numbers_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Numbers')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='numbers', to='home.HomePage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.numbers', models.Model),
        ),
        migrations.AddField(
            model_name='numbers',
            name='icon',
            field=models.CharField(choices=[('fa fa-bar-chart', 'Grafiek'), ('fa fa-car', 'Auto'), ('fa fa-battery-3', 'Batterij'), ('fa fa-bolt', 'Bliksem'), ('fa fa-bomb', 'Bom'), ('fa fa-calendar', 'kalender'), ('fa fa-camera', 'Fototoestel'), ('fa fa-child', 'Link'), ('fa fa-cloud', 'Wolk'), ('fa fa-commenting-o', 'Tekstballon'), ('fa fa-exclamation', 'Uitroepteken'), ('fa fa-flag', 'Vlag'), ('fa fa-gift', 'Geschenk'), ('fa fa-group', 'Groep mensen'), ('fa fa-glass', 'Glas'), ('fa fa-home', 'Home'), ('fa fa-heart-o', 'Hart'), ('fa fa-cutlery', 'Bestek'), ('fa fa-globe', 'Wereldbol'), ('fa fa-hashtag', 'Hashtag'), ('fa fa-key', 'Sleutel'), ('fa fa-magic', 'Toverstaf'), ('fa fa-microphone', 'Microfoon'), ('fa fa-mobile', 'GSM'), ('fa fa-paint-brush', 'Penceel'), ('fa fa-pencil', 'Potlood'), ('fa fa-quote-right', 'Aanhalingstekens'), ('fa fa-shopping-basket', 'Mandje'), ('fa fa-star', 'Ster'), ('fa fa-user', 'Gebruiker'), ('fa fa-video-camera', 'Camera')], default='fa fa-bar-chart', max_length=28, verbose_name='icoon'),
        ),
        migrations.AddField(
            model_name='numbers',
            name='icon_color',
            field=models.CharField(choices=[('text-default', 'Wit'), ('text-black', 'Zwart'), ('text-gray', 'Lichtgijs'), ('text-primary', 'Yourin Rood'), ('text-deluge', 'Paars'), ('text-piction-blue', 'Blauw'), ('text-mantis', 'Rood-oranje'), ('text-malibu', 'Lichtblauw'), ('text-carrot', 'Oranje'), ('text-red', 'Fel Rood'), ('text-blue-gray', 'Paars-blauw'), ('text-pink', 'Donkerpaars'), ('text-green', 'Groen'), ('text-yellow', 'Geel')], default='text-default', max_length=32, verbose_name='kleur icoon'),
        ),
        migrations.AlterField(
            model_name='numbers',
            name='value',
            field=models.PositiveIntegerField(default=1, verbose_name='cijfer'),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),))), ('blog_embed', home.blocks.BlogEmbedBlock())), verbose_name='Blog Inhoud'),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),))), ('blog_video', wagtail.wagtailembeds.blocks.EmbedBlock())), verbose_name='Blog Inhoud'),
        ),
        migrations.AlterField(
            model_name='blog',
            name='blog_content',
            field=wagtail.wagtailcore.fields.StreamField((('blog_paragraph', home.blocks.ParagraphBlock()), ('blog_image', wagtail.wagtailcore.blocks.StructBlock(())), ('blog_quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),))), ('blog_video', home.blocks.BlogEmbedBlock())), verbose_name='Blog Inhoud'),
        ),
        migrations.AddField(
            model_name='influencer',
            name='quote',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='Influencer citaat'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.CharField(choices=[(1, 'Sport'), (2, 'Kamp'), (3, 'Festival'), (4, 'Club')], max_length=64, verbose_name='categorie'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.PositiveIntegerField(choices=[(1, 'Sport'), (2, 'Kamp'), (3, 'Festival'), (4, 'Club')], max_length=64, verbose_name='categorie'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.PositiveIntegerField(choices=[(1, 'Sport'), (2, 'Kamp'), (3, 'Festival'), (4, 'Club')], verbose_name='categorie'),
        ),
        migrations.AlterField(
            model_name='category',
            name='name',
            field=models.PositiveIntegerField(choices=[(1, 'Sport'), (2, 'Kamp'), (3, 'Festival'), (4, 'Club')], default=1, verbose_name='categorie'),
        ),
        migrations.AlterField(
            model_name='event',
            name='category',
            field=models.PositiveIntegerField(choices=[(1, 'Sport'), (2, 'Kamp'), (3, 'Festival'), (4, 'Club')], default=1),
        ),
        migrations.AddField(
            model_name='whatwedo',
            name='icon',
            field=models.CharField(choices=[('fa fa-bar-chart', 'Grafiek'), ('fa fa-car', 'Auto'), ('fa fa-battery-3', 'Batterij'), ('fa fa-bolt', 'Bliksem'), ('fa fa-bomb', 'Bom'), ('fa fa-calendar', 'kalender'), ('fa fa-camera', 'Fototoestel'), ('fa fa-child', 'Link'), ('fa fa-cloud', 'Wolk'), ('fa fa-commenting-o', 'Tekstballon'), ('fa fa-exclamation', 'Uitroepteken'), ('fa fa-flag', 'Vlag'), ('fa fa-gift', 'Geschenk'), ('fa fa-group', 'Groep mensen'), ('fa fa-glass', 'Glas'), ('fa fa-home', 'Home'), ('fa fa-heart-o', 'Hart'), ('fa fa-cutlery', 'Bestek'), ('fa fa-globe', 'Wereldbol'), ('fa fa-hashtag', 'Hashtag'), ('fa fa-key', 'Sleutel'), ('fa fa-magic', 'Toverstaf'), ('fa fa-microphone', 'Microfoon'), ('fa fa-mobile', 'GSM'), ('fa fa-paint-brush', 'Penceel'), ('fa fa-pencil', 'Potlood'), ('fa fa-quote-right', 'Aanhalingstekens'), ('fa fa-shopping-basket', 'Mandje'), ('fa fa-star', 'Ster'), ('fa fa-user', 'Gebruiker'), ('fa fa-video-camera', 'Camera')], default='fa fa-commenting-o', max_length=28),
        ),
        migrations.AlterField(
            model_name='whatwedo',
            name='extra_info',
            field=models.TextField(blank=True, max_length=180, null=True, verbose_name='info tekst'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='intro_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='home_intro_images', to='home.CustomImage'),
        ),
        migrations.RemoveField(
            model_name='location',
            name='address',
        ),
        migrations.DeleteModel(
            name='Location',
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=40, verbose_name='stad')),
                ('postal_code', models.CharField(max_length=8, verbose_name='postcode')),
                ('street', models.CharField(max_length=40, verbose_name='straat')),
                ('number', models.CharField(max_length=8, verbose_name='nummer')),
                ('country', django_countries.fields.CountryField(default='BE', max_length=2, null=True, verbose_name='land')),
            ],
            options={
                'ordering': ['city'],
                'verbose_name': 'adres',
                'verbose_name_plural': 'adressen',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('address_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Address')),
                ('name', models.CharField(max_length=64)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'locatie',
                'verbose_name_plural': 'locaties',
            },
            bases=('home.address',),
        ),
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Location')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='home.Event')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.location', models.Model),
        ),
        migrations.CreateModel(
            name='ContactLocation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.Location')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='home.ContactPage')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.location', models.Model),
        ),
        migrations.AddField(
            model_name='contactpage',
            name='email',
            field=models.EmailField(default='ditishet_emailadresvoor@contactformulier.website', max_length=254, verbose_name='contact email'),
        ),
        migrations.AddField(
            model_name='contactpage',
            name='intro_text',
            field=models.CharField(default='Vivamus sagittis lacus vel augue laoreet rutrum faucibus \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdolor auctor. Cras justo odio, dapibus ac facilisis in, egestas \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teget quam. Cras mattis consectetur purus sit amet fermentum.', max_length=255),
        ),
        migrations.AddField(
            model_name='homepage',
            name='fb_link',
            field=models.URLField(default='https://www.facebook.com/yourin.be/', verbose_name='FB pagina'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='linkedin_link',
            field=models.URLField(default='https://www.linkedin.com/company/4982091', verbose_name='LinkedIn pagina'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='twitter_link',
            field=models.URLField(default='https://twitter.com/yourinbe', verbose_name='Twitter pagina'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='youtube_link',
            field=models.URLField(default='https://www.youtube.com/user/yourinbe', verbose_name='Youtube kanaal'),
        ),
        migrations.RemoveField(
            model_name='contactpage',
            name='catchphrase',
        ),
        migrations.RemoveField(
            model_name='event',
            name='catchphrase',
        ),
        migrations.AlterModelOptions(
            name='event',
            options={'verbose_name': 'event groepen'},
        ),
        migrations.AlterField(
            model_name='event',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name='logo'),
        ),
        migrations.AlterField(
            model_name='event',
            name='website',
            field=models.URLField(null=True, verbose_name='website '),
        ),
        migrations.RemoveField(
            model_name='event',
            name='event_date',
        ),
        migrations.RemoveField(
            model_name='event',
            name='event_duration',
        ),
        migrations.AlterField(
            model_name='location',
            name='name',
            field=models.CharField(max_length=64, verbose_name='naam locatie'),
        ),
        migrations.CreateModel(
            name='EventInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=128, verbose_name='naam')),
                ('event_description', models.TextField(null=True, verbose_name='beschrijving')),
                ('event_date', models.DateField(default=datetime.date.today, verbose_name='datum')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.Location')),
            ],
        ),
        migrations.CreateModel(
            name='EventEventInstance',
            fields=[
                ('eventinstance_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.EventInstance')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='home.Event')),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
            bases=('home.eventinstance', models.Model),
        ),
        migrations.AlterField(
            model_name='eventinstance',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='home.Location', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='event',
            name='subtitle',
            field=models.CharField(blank=True, max_length=120, null=True, verbose_name='korte intro'),
        ),
        migrations.AlterModelOptions(
            name='event',
            options={'verbose_name': 'event groep', 'verbose_name_plural': 'event groepen'},
        ),
        migrations.AlterModelOptions(
            name='eventinstance',
            options={'verbose_name': 'evenement', 'verbose_name_plural': 'evenementen'},
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='website',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name='afbeelding'),
        ),
        migrations.AlterModelOptions(
            name='eventinstance',
            options={'ordering': ['-event_date', 'event_name'], 'verbose_name': 'evenement', 'verbose_name_plural': 'evenementen'},
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='home.CustomImage'),
        ),
        migrations.AlterModelOptions(
            name='aboutpage',
            options={'verbose_name': 'over ons pagina', 'verbose_name_plural': "over ons pagina's"},
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='date',
            field=models.DateField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='edited',
            field=models.DateField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='page_content',
            field=wagtail.wagtailcore.fields.StreamField((('subtitle', home.blocks.SubtitleBlock()), ('paragraph', home.blocks.ParagraphBlock()), ('image', wagtail.wagtailcore.blocks.StructBlock(())), ('quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),))), ('video', home.blocks.BlogEmbedBlock())), null=True, verbose_name='Over ons pagina - inhoud'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='catchphrase_color',
            field=models.CharField(choices=[('text-default', 'Wit'), ('text-black', 'Zwart'), ('text-gray', 'Lichtgijs'), ('text-primary', 'Yourin Rood'), ('text-deluge', 'Paars'), ('text-piction-blue', 'Blauw'), ('text-mantis', 'Rood-oranje'), ('text-malibu', 'Lichtblauw'), ('text-carrot', 'Oranje'), ('text-red', 'Fel Rood'), ('text-blue-gray', 'Paars-blauw'), ('text-pink', 'Donkerpaars'), ('text-green', 'Groen'), ('text-yellow', 'Geel')], default='text-default', max_length=32, verbose_name='catchphrase kleur'),
        ),
        migrations.CreateModel(
            name='DynamicPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('page_content', wagtail.wagtailcore.fields.StreamField((('subtitle', home.blocks.SubtitleBlock()), ('paragraph', home.blocks.ParagraphBlock()), ('image', wagtail.wagtailcore.blocks.StructBlock(())), ('quote', wagtail.wagtailcore.blocks.StructBlock((('quote', wagtail.wagtailcore.blocks.CharBlock(help_text='Geef hier een citaat in', label='Citaat', max_length=164, required=True)),))), ('video', home.blocks.BlogEmbedBlock()), ('two_cols', wagtail.wagtailcore.blocks.StructBlock((('left', wagtail.wagtailcore.blocks.StreamBlock((('subtitel', home.blocks.SubtitleBlock()),), icon='arrow-left', label='Linkse kolom')), ('right', wagtail.wagtailcore.blocks.StreamBlock((('subtitel', home.blocks.SubtitleBlock()),), icon='arrow-right', label='Rechtse kolom'))), classname='range'))), null=True, verbose_name='pagina inhoud')),
                ('page_icon', models.CharField(choices=[('fa fa-bar-chart', 'Grafiek'), ('fa fa-car', 'Auto'), ('fa fa-battery-3', 'Batterij'), ('fa fa-bolt', 'Bliksem'), ('fa fa-bomb', 'Bom'), ('fa fa-calendar', 'kalender'), ('fa fa-camera', 'Fototoestel'), ('fa fa-child', 'Link'), ('fa fa-cloud', 'Wolk'), ('fa fa-commenting-o', 'Tekstballon'), ('fa fa-exclamation', 'Uitroepteken'), ('fa fa-flag', 'Vlag'), ('fa fa-gift', 'Geschenk'), ('fa fa-group', 'Groep mensen'), ('fa fa-glass', 'Glas'), ('fa fa-home', 'Home'), ('fa fa-heart-o', 'Hart'), ('fa fa-cutlery', 'Bestek'), ('fa fa-globe', 'Wereldbol'), ('fa fa-hashtag', 'Hashtag'), ('fa fa-key', 'Sleutel'), ('fa fa-magic', 'Toverstaf'), ('fa fa-microphone', 'Microfoon'), ('fa fa-mobile', 'GSM'), ('fa fa-paint-brush', 'Penceel'), ('fa fa-pencil', 'Potlood'), ('fa fa-quote-right', 'Aanhalingstekens'), ('fa fa-shopping-basket', 'Mandje'), ('fa fa-star', 'Ster'), ('fa fa-user', 'Gebruiker'), ('fa fa-video-camera', 'Camera')], default='fa fa-commenting-o', max_length=28, verbose_name='pagina icoon')),
                ('page_title', models.CharField(default='Dit is de grote ondertitel', max_length=36, verbose_name='pagina titel')),
            ],
            options={
                'verbose_name': 'dynamische pagina',
                'verbose_name_plural': "dynamische pagina's",
            },
            bases=('wagtailcore.page',),
        ),
    ]
